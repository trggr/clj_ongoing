{"ts":1351824952176,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1351825065588,"patch":[[{"diffs":[[1,"(def s  \"C:/apps/clooj/4clojure/data/tabcol.txt\")\r\n\r\n(defn slurpcsv [file]\r\n  (map #(clojure.string/split % #\",\")\r\n       (clojure.string/split\r\n         (slurp file) #\"\\r\\n\")))\r\n\r\n(def x (slurpcsv s))\r\n\r\n(map first x)\r\n"]],"start1":0,"start2":0,"length1":0,"length2":220}]],"length":220,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351855956649,"patch":[[{"diffs":[[0,"\n\r\n("],[-1,"map first x"],[1,"defn third [coll] (nth coll 2))\r\n\r\n(map first x)\r\n\r\n(map #(vector (key %)\r\n              (map (juxt second third) (val %)))\r\n     (group-by first x)"],[0,")\r\n"]],"start1":202,"start2":202,"length1":18,"length2":155}]],"length":357,"saved":false}
{"ts":1351856521782,"patch":[[{"diffs":[[0,"\n\r\n("],[-1,"map #(vector (key %)\r\n              (map (juxt second third) (val %"],[1,"defn delimit-by [val coll]\r\n  \"Separates the items of a sequence by an arbitrary value\"\r\n  (if (empty? coll)\r\n    coll\r\n    (reduce #(conj %1 val %2) [(first coll)] (rest coll))))\r\n\r\n\r\n(map #(vector (key %)\r\n              (map (juxt second third) (val %)))\r\n     (group-by first x))\r\n\r\n\r\n(map #(vector (key %)\r\n              (flatten\r\n                (delimit-by \",\"\r\n                          (map (juxt second third) (val %))"],[0,")))\r"]],"start1":255,"start2":255,"length1":75,"length2":435}]],"length":717,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351863658345,"patch":[[{"diffs":[[0,"[file]\r\n"],[1,"  \"Load a CSV-delimited file into a list of vectors\"\r\n"],[0,"  (map #"]],"start1":68,"start2":68,"length1":16,"length2":70}]],"length":771,"saved":false}
{"ts":1351863747825,"patch":[[{"diffs":[[-1,"(def s  \"C:/apps/clooj/4clojure/data/tabcol.txt\")\r\n\r\n"],[0,"(def"]],"start1":0,"start2":0,"length1":57,"length2":4},{"diffs":[[0,"(def"],[-1," x (slurpcsv s))\r\n\r\n(defn third [coll] (nth coll 2))"],[1,"n third [coll]\r\n  \"Returns a third element from a collection\"\r\n  (nth coll 2))\r\n\r\n(def s  \"C:/apps/clooj/4clojure/data/tabcol.txt\")\r\n(def x (slurpcsv s))\r\n"],[0,"\r\n\r\n"]],"start1":182,"start2":182,"length1":60,"length2":163}]],"length":821,"saved":false}
{"ts":1351863813428,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"(def s  \"C:/apps/clooj/4clojure/data/tabcol.txt\")\r\n(def x (slurpcsv s))\r\n\r\n\r\n(map first x)\r\n\r\n"],[0,"(def"]],"start1":264,"start2":264,"length1":102,"length2":8},{"diffs":[[0,"coll))))\r\n\r\n"],[1,"(def s  \"C:/apps/clooj/4clojure/data/tabcol.txt\")\r\n(def x (slurpcsv s))\r\n\r\n"],[0,"\r\n(map #(vec"]],"start1":440,"start2":440,"length1":24,"length2":99}]],"length":802,"saved":false}
{"ts":1351863875915,"patch":[[{"diffs":[[1,"\r\n"],[0,"(defn slurpc"]],"start1":0,"start2":0,"length1":12,"length2":14},{"diffs":[[0,"coll))))\r\n\r\n"],[1,";;;; ------------------ Test ---------------------\r\n"],[0,"(def s  \"C:/"]],"start1":442,"start2":442,"length1":24,"length2":76}]],"length":856,"saved":false}
{"ts":1351864050156,"patch":[[{"diffs":[[0,"-------\r"],[1,"\n\r\n;; CSV file describing a database table.\r\n;; The file has three fields: table name, column name, and column type\r\n;;\r"],[0,"\n(def s "]],"start1":497,"start2":497,"length1":16,"length2":136},{"diffs":[[0,"t\")\r"],[1,"\n\r\n;; \r"],[0,"\n(def "],[-1,"x"],[1,"dict"],[0," (sl"]],"start1":672,"start2":672,"length1":15,"length2":25},{"diffs":[[0,"pcsv s))\r\n\r\n"],[-1,"\r\n"],[0,"(map #(vecto"]],"start1":699,"start2":699,"length1":26,"length2":24}]],"length":984,"saved":false}
{"ts":1351864057204,"patch":[[{"diffs":[[0,"up-by first "],[-1,"x"],[1,"dict"],[0,"))\r\n\r\n\r\n(map"]],"start1":793,"start2":793,"length1":25,"length2":28}]],"length":987,"saved":false}
{"ts":1351864087864,"patch":[[{"diffs":[[0,"--\r\n\r\n;;"],[1," This"],[0," CSV fil"]],"start1":502,"start2":502,"length1":16,"length2":21},{"diffs":[[0," describ"],[-1,"ing"],[1,"es"],[0," a datab"]],"start1":524,"start2":524,"length1":19,"length2":18},{"diffs":[[0,"ble."],[-1,"\r\n;; The file"],[1," It"],[0," has"]],"start1":548,"start2":548,"length1":21,"length2":11},{"diffs":[[0," fields:"],[1,"\r\n;;"],[0," table n"]],"start1":565,"start2":565,"length1":16,"length2":20}]],"length":985,"saved":false}
{"ts":1351864099409,"patch":[[{"diffs":[[0,"----\r\n\r\n"],[1,";;\r\n"],[0,";; This "]],"start1":500,"start2":500,"length1":16,"length2":20}]],"length":989,"saved":false}
{"ts":1351864118076,"patch":[[{"diffs":[[0,"ment"],[-1," from a collection"],[0,"\"\r\n "]],"start1":226,"start2":226,"length1":26,"length2":8}]],"length":971,"saved":false}
{"ts":1351864126241,"patch":[[{"diffs":[[0,"ird "],[-1,"element"],[1,"item"],[0,"\"\r\n "]],"start1":219,"start2":219,"length1":15,"length2":12}]],"length":968,"saved":false}
{"ts":1351864145928,"patch":[[{"diffs":[[0,"tes "],[-1,"the "],[0,"item"]],"start1":287,"start2":287,"length1":12,"length2":8}]],"length":964,"saved":false}
{"ts":1351864301177,"patch":[[{"diffs":[[0,"ng/split"],[-1,"\r\n        "],[0," (slurp "]],"start1":138,"start2":138,"length1":26,"length2":16}]],"length":954,"saved":false}
{"ts":1351864409461,"patch":[[{"diffs":[[0,"\")\r\n\r\n;;"],[-1," "],[0,"\r\n(def d"]],"start1":640,"start2":640,"length1":17,"length2":16}]],"length":953,"saved":false}
{"ts":1351876235486,"patch":[[{"diffs":[[1,"(ns tt.csvslurp)\r\n"],[0,"\r\n(defn slurpcsv"]],"start1":0,"start2":0,"length1":16,"length2":34},{"diffs":[[0,"def "],[-1,"s  \"C:/apps/clooj/4clojure/data/tabcol.txt\")\r\n\r\n;;\r\n(def dict (slurpcsv s))\r\n\r\n(map #(vector (key %)\r\n              (map (juxt second third) (val %)))\r\n     (group-by first dict))\r\n\r\n\r\n(map #(vector (key %)\r\n              (flatten\r\n                (delimit-by \",\"\r\n                          (map (juxt second third) (val %)))))\r\n     (group-by first x))"],[1,"metafile \"C:/tmp/file-out.txt\")\r\n(def sqlfile \"C:/tmp/stage.sql\")\r\n(def dict (group-by first (slurpcsv metafile)))\r\n\r\n(defn gendrop [table]\r\n  \"Generates a drop statement\"\r\n    (str \"DROP TABLE \" table \";\\n\"))\r\n\r\n(defn gencreate [[table columns]]\r\n  \"Generates DDL statement\"\r\n  (str\r\n    (apply str \"CREATE TABLE \" table \" (\\n\"\r\n           (delimit-by \",\\n\"\r\n                       (map #(str \"  \"\r\n                                  (second %1) \"     \"\r\n                                  (third %1)) columns)))\r\n    \"\\n);\\n\\n\"))\r\n\r\n(def drops (reduce str (map gendrop dict)))\r\n(def tabs (reduce str (map gencreate dict)))\r\n\r\n(spit sqlfile create)\r\n\r\n"],[0,"\r\n"]],"start1":612,"start2":612,"length1":359,"length2":657}]],"length":1269,"saved":false}
